# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '42469c74-b14c-4ce2-bd38-98750bbe6e92'
  imageRepository: 'azooinmyluggagebuilddemo'
  containerRegistry: 'builddemo.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Namespace
  k8sNamespace: 'demo1'
  imagePullSecret: 'builddemo6c35-auth'
  # bake.manifestsBundle: ''

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    # - task: PublishPipelineArtifact@0
    #   inputs:
    #     artifactName: 'manifests'
    #     targetPath: 'manifests'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'charts'
        targetPath: 'charts/webfrontend'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'))
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'azooinmyluggagebuilddemo-1324.demo1'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'charts'
              downloadPath: '$(System.ArtifactsDirectory)/charts'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespace)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: bake
            inputs:
              action: bake
              helmChart: '$(System.ArtifactsDirectory)/charts'

          - task: KubernetesManifest@1
            displayName: deploy
            inputs:
              kubernetesServiceConnection: 'builddemo-production-master'
              namespace: $(k8sNamespace)
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)

- stage: DeployPR
  displayName: Deploy stage for PR
  dependsOn: Build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  jobs:
  - deployment: Deploy
    displayName: Deploy job
    pool:
      vmImage: $(vmImageName)
    environment: 'azooinmyluggagebuilddemo-1324.demo1'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'manifests'
              downloadPath: '$(System.ArtifactsDirectory)/manifests'

          - task: KubernetesManifest@0
            displayName: 'Create a new namespace'
            inputs:
              kubernetesServiceConnection: 'builddemo-production-master'
              manifests: '$(System.ArtifactsDirectory)/manifests/pr-namespace.yml'

          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: 'charts'
              downloadPath: '$(System.ArtifactsDirectory)/charts'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: demopr
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@1
            displayName: bake
            inputs:
              action: bake
              helmChart: '$(System.ArtifactsDirectory)/charts/webfrontend'

          - task: KubernetesManifest@1
            displayName: deploy
            inputs:
              kubernetesServiceConnection: 'builddemo-production-master'
              namespace: demopr
              manifests: $(bake.manifestsBundle)
              imagePullSecrets: $(imagePullSecret)
          # - task: KubernetesManifest@0
          #   displayName: Deploy to Kubernetes cluster
          #   inputs:
          #     action: deploy
          #     namespace: $(k8sNamespace)
          #     manifests: |
          #       $(System.ArtifactsDirectory)/manifests/deployment.yml
          #       $(System.ArtifactsDirectory)/manifests/service.yml
          #     imagePullSecrets: |
          #       $(imagePullSecret)
          #     containers: |
          #       $(containerRegistry)/$(imageRepository):$(tag)
